watch 사용시 객체의 속성을 () => 로 감싸야 하는 이유 
watch를 사용할 때 객체의 속성을 감싸야 하는 이유와, ref()일 때는 왜 다른지 아래에 자세히 설명드릴게요.

🔍 1. 왜 reactive 객체의 속성은 () => user.age로 감싸야 하나?
✅ 핵심 이유: reactive 객체는 Proxy 기반이기 때문입니다.

const user = reactive({ age: 0 });
user.age는 일반 값처럼 보이지만, 내부적으로는 Vue가 user 객체 전체를 추적합니다.

만약 watch(user.age)처럼 바로 쓰면, 이 시점에 user.age의 값이 평가되어, 숫자 0이 들어가 버립니다. → 이건 반응형 참조가 아님.
반대로 () => user.age로 쓰면 Vue는 이 "getter 함수" 안에서 user.age에 접근하는 걸 추적해서 반응성을 유지합니다.

👉 즉, 속성 접근을 추적하려면 함수로 감싸서 Vue가 실행 시점에 접근하도록 해야 함입니다.

🔍 2. ref()일 때는 감싸지 않아도 되는 이유
const count = ref(0);
count 자체가 이미 **반응형 참조(Ref 객체)**입니다.

그래서 watch(count, ...)라고 하면, Vue는 .value의 변화를 자동으로 추적합니다.
내부적으로 Vue는 ref를 처리할 때 .value에 접근하는 로직을 포함하고 있어요.