1. CSR (Client Side Rendering, 클라이언트 사이드 렌더링)
CSR은 웹 페이지의 **렌더링(화면 구성)**을 브라우저(클라이언트)가 담당하는 방식입니다.


작동 방식: 최초 요청 시 HTML은 거의 빈 껍데기 형태로 전달되고, JavaScript가 실행되면서 실제 콘텐츠가 렌더링됩니다.

장점:

빠른 페이지 전환 (SPA 구현 가능)
서버 부하 감소

단점:

SEO에 불리함 (크롤러가 콘텐츠를 보기 어려움)
첫 로딩 속도가 느릴 수 있음

📌 1. 정의
CSR은 웹 페이지의 **렌더링(화면 구성)**을 브라우저(클라이언트)가 담당하는 방식입니다.
초기 로딩 시 서버는 HTML 틀과 JavaScript 코드만 전달하고, 실제 화면에 보일 콘텐츠는 클라이언트에서 JavaScript가 실행되면서 구성됩니다.

📌 2. 작동 흐름
[요청] 브라우저 -> 서버
    ↓
[응답] HTML + JS 파일 (비어 있는 틀 형태)
    ↓
[클라이언트] JS 실행 → 데이터 요청 (예: API 호출)
    ↓
[렌더링] 받은 데이터로 화면 동적으로 구성

<!-- 서버가 처음 보내주는 HTML -->
<html>
  <head><script src="main.js"></script></head>
  <body>
    <div id="app"><!-- 실제 콘텐츠는 여기에 JS로 렌더됨 --></div>
  </body>
</html>

📌 3. 사용 기술
CSR을 구현할 때 보통 다음과 같은 기술이 쓰입니다:

기술	설명
JavaScript	화면 구성 로직 담당
프레임워크	React, Vue, Angular 등
REST API	서버에서 데이터 가져오기
Webpack / Vite	자바스크립트 번들링 도구
Routing 라이브러리	react-router, vue-router 등으로 페이지 이동 구현

📌 4. 장점
🚀 빠른 페이지 전환	페이지 전환 시 전체 HTML을 다시 받지 않음
📉 서버 부하 감소	HTML 렌더링을 클라이언트가 처리
🧩 컴포넌트 기반 개발	유지보수와 재사용성 향상

📌 5. 단점
🐢 초기 로딩 느림		JS, CSS 모두 받아야 화면이 보임
❌ SEO 취약		 검색 엔진이 JS를 실행하지 못하면 콘텐츠를 못 읽음
📉 성능 저하		      저사양 기기에서 JS 실행 부담

