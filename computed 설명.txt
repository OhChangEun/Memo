computed 설명

ref()와 reactive()는 렌더링을 발생시키는 함수, 
computed()는 의존하는 값이 변경될 때만 재계산 됨


📚 Vue의 computed 정의
computed는 **계산된 속성(computed property)**을 정의하는 Vue의 속성입니다. 이는 반응형 데이터를 기반으로 계산된 값을 반환합니다. 기본적으로 캐싱된 값을 제공하여 불필요한 계산을 방지하고, 성능 최적화를 제공합니다.

기본 구조:
js
복사
편집
computed: {
  // 계산된 속성 정의
  fullName() {
    return this.firstName + ' ' + this.lastName;
  }
}
computed는 data와 methods의 중간 역할을 합니다. data에서 값을 가져와서 계산하고, 뷰 템플릿에서 재사용할 수 있게 만듭니다.

📍 computed 보통 사용되는 곳
복잡한 계산이 필요할 때

예를 들어, 여러 데이터의 조합이나 변형이 필요할 때 computed를 사용하여 값을 계산합니다.

js
복사
편집
computed: {
  priceWithTax() {
    return this.price * (1 + this.taxRate);
  }
}
반복적인 계산을 줄일 때

템플릿에서 자주 사용되는 계산된 값을 캐시하여 성능 최적화합니다.

html
복사
편집
<div>{{ discountedPrice }}</div>
복잡한 데이터 변환

예를 들어, 리스트에서 특정 조건에 맞는 데이터 필터링이나 순서를 조정하는 계산된 속성에 사용됩니다.

computed: {
  filteredItems() {
    return this.items.filter(item => item.active);
  }
}
템플릿에 로직을 간결하게 처리

계산된 값을 템플릿에서 바로 사용하여, 복잡한 로직을 템플릿에서 분리하고, 가독성을 높입니다.

🏅 computed의 장점

자동 의존성 추적
computed는 의존하는 반응형 데이터(예: ref, reactive)가 바뀌면 자동으로 다시 계산됩니다. computed는 내부적으로 이 의존성을 추적하고, 불필요한 계산을 방지합니다.

성능 최적화
값이 변경되지 않는 한, computed는 캐싱된 값을 반환합니다. 이는 불필요한 계산을 방지하여 성능을 최적화합니다.

코드의 가독성 향상
복잡한 로직이나 계산식을 템플릿에서 분리하여 가독성을 향상시킵니다.

읽기 전용 속성
기본적으로 computed 속성은 읽기 전용입니다. 이를 통해 값을 안전하게 보호할 수 있습니다. 값이 바뀌어야 할 경우, setter를 정의할 수 있습니다.

값을 재사용 가능
템플릿에서 반복적으로 계산할 필요 없이 computed로 계산된 값을 재사용할 수 있습니다. 이는 코드 중복을 줄여줍니다.

📝 computed vs methods 차이점
항목	computed	methods
목적	계산된 속성, 파생된 값 반환	특정 동작, 이벤트 처리
성능	의존값 변경 시만 계산됨 (캐시됨)	항상 새로 계산됨
템플릿 사용	자동 캐싱 및 효율적 사용	매번 함수 호출
읽기 전용	기본적으로 읽기 전용	함수 내에서 자유롭게 사용 가능

🎯 결론
computed는 반응형 데이터를 기반으로 계산된 값을 반환하는 Vue의 중요한 기능입니다.
성능 최적화를 위해 캐싱된 값을 재사용하며, 불필요한 계산을 방지합니다.
복잡한 로직을 템플릿에서 분리하고, 가독성을 높이며, 성능을 최적화하는 데 매우 유용합니다.
필요한 계산을 효율적으로 처리하고 동적 업데이트를 지원하는 computed를 적극 활용하세요!