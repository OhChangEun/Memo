당신이 말한 이 구조는 "익명 내부 클래스 (Anonymous Inner Class)" 라고 합니다.

✅ 상황 요약
Phone phone = new Phone() {
    @Override
    void call() {
        // 구현 내용
    }
};

Phone은 추상 클래스 (또는 인터페이스)입니다.
원래는 상속받은 자식 클래스를 따로 만들어야 하지만,
위처럼 한 줄로 클래스 + 메서드 구현을 동시에 처리한 방식이 바로 익명 내부 클래스입니다.

✅ 왜 익명 내부 클래스가 쓰일까?

클래스 이름 없이 "임시로 딱 한 번" 쓸 클래스를 만들고 싶을 때
이벤트 처리, 콜백, UI 리스너 등에서 자주 사용됨

✅ 예시로 비교

[기존 방식: 클래스를 따로 만듦]
abstract class Phone {
    abstract void call();
}

class MyPhone extends Phone {
    void call() {
        System.out.println("전화 걸기");
    }
}
Phone phone = new MyPhone();  // 사용

[익명 내부 클래스 사용 방식]
Phone phone = new Phone() {
    @Override
    void call() {
        System.out.println("전화 걸기");
    }
};
new Phone() 뒤에 중괄호 {}를 쓰면 즉석에서 자식 클래스를 정의하고, 바로 객체를 만듦

이름이 없기 때문에 "익명(Anonymous)"이라고 부름
일회성 구현에 적합

✅ 그림으로 이해
Phone phone = new Phone() { // ← Phone을 상속한 익명 클래스
    @Override
    void call() {           // ← 추상 메서드 구현
        System.out.println("call!");
    }
};
이건 사실상 다음과 같아요:

class 임시클래스 extends Phone {
    void call() {
        System.out.println("call!");
    }
}
Phone phone = new 임시클래스();

✅ 요약
항목	설명
new Phone() {}	추상 클래스를 상속한 익명 내부 클래스 생성
내부 메서드 구현	추상 메서드 call()을 즉석에서 오버라이딩
사용 목적	한 번만 쓸 클래스를 간단히 정의하고 싶을 때