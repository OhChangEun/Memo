useRef와 let을 사용한 일반 변수의 차이 

useRef와 일반 변수(let cntText)가 모두 정상적으로 동작은 하지만,
둘 사이에는 React 렌더링 흐름과 메모리 구조에 따른 중요한 차이점이 있습니다.

🔍 코드 분석: 뭐가 다른가?
const counterRef = useRef(0); // ✅ React 렌더링과 무관한 "지속적인 저장소"
let cntText = 0;              // ❌ 매 렌더링마다 초기화되는 일반 변수

💡 중요한 차이점 요약
항목	useRef	일반 변수 (let)
값이 유지됨	✅ 리렌더링 시에도 값 유지됨			❌ 렌더링되면 다시 초기화됨
렌더링 영향 여부	❌ 값이 바뀌어도 렌더링 트리거 안 함		❌ 렌더링도 안 하고, 값도 날아감
대표적 용도	DOM 접근, 이전 값 저장, interval ID 보관 등	컴포넌트 안에서 일시적인 계산용 등

🔎 왜 cntText도 되는 것처럼 보일까?
현재 코드는 렌더링이 발생하지 않기 때문에 cntText도 유지되는 것처럼 보이는 겁니다.

👇 cntText는 이런 흐름에서는 문제 없음:
setInterval(() => {
  cntText += 1; // 매번 이 함수가 closure에 갇힌 cntText = 0을 기준으로 동작
}, 1000);
하지만 만약 버튼 클릭이나 상태 업데이트로 렌더링이 발생하면?

const RefCnt = () => {
  let cntText = 0; // 🔄 함수 재실행마다 0으로 초기화됨
  ...
}

⬆️ 렌더링이 일어나면 컴포넌트 함수 전체가 다시 실행되기 때문에
→ cntText는 항상 0부터 다시 시작하게 됩니다.
(즉, 변화한 값을 기억하지 못함)

✅ 결론
상황							추천 방식
리렌더링 사이에도 값을 유지해야 함	useRef 사용
그냥 렌더링 중 일시 계산용 값		일반 변수 가능

🔁 참고로 이런 상황이면 문제가 발생합니다:
const [state, setState] = useState(0);
let temp = 0;

const onClick = () => {
  temp += 1;
  setState(prev => prev + 1); // 🔄 이걸로 렌더링 발생
  console.log(temp); // ❌ 매번 1부터 시작
};

⬆️ temp는 매번 0부터 시작해서 1만 찍히는 현상이 발생합니다.