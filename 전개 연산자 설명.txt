JavaScript에서 ... 기호를 사용해 배열이나 객체의 값을 펼치는 문법

... : 전개(spread) 라고 부르고,
배열이나 객체의 복사, 병합, 새로운 값 추가 등에 사용합니다.
좋은 질문입니다!
전개 연산자(...)를 사용하는 핵심 이유는 다음과 같이 정리할 수 있습니다:

✅ 전개 연산자를 사용하는 이유
1. 불변성(immutability)을 지키기 위해
특히 React, Redux 같은 프레임워크/라이브러리에서 필수!

기존 객체나 배열을 직접 수정하지 않고

복사한 뒤 수정하여 상태 관리의 안정성과 예측 가능성을 높임

const oldState = { count: 1 };
const newState = { ...oldState, count: 2 };  // ✅ 새로운 객체 생성
📌 React는 상태(state)가 변경되었는지 주소로 판단하기 때문에, 전개 연산자를 사용해 새 객체/배열 생성이 필요함.

2. 원본을 보호하려고 (side effect 방지)
원본 데이터를 실수로 바꾸지 않도록 복사해서 안전하게 조작

const config = { debug: true };

// 원본을 건드리지 않고 수정
const updatedConfig = { ...config, debug: false };

3. 배열/객체를 쉽게 복사하거나 병합하려고

const arr1 = [1, 2];
const arr2 = [3, 4];

const combined = [...arr1, ...arr2]; // [1, 2, 3, 4]

const obj1 = { a: 1 };
const obj2 = { b: 2 };

const merged = { ...obj1, ...obj2 }; // { a: 1, b: 2 }
전개 연산자 덕분에 push, Object.assign 없이 간결하게 작성 가능

4. React에서 state 업데이트 시 필수

// 예: 상태에 항목 추가
const [list, setList] = useState([1, 2]);

setList([...list, 3]); // 원본은 그대로, 새 배열로 변경
push처럼 원본을 직접 바꾸면 React가 변경을 감지하지 못함 ❌

🔍 요약
이유				설명
✅ 불변성 유지		React 상태 관리에 중요
✅ 원본 보호		예기치 않은 변경 방지
✅ 간결한 문법		복사, 병합을 한 줄로 쉽게 처리
✅ 리렌더링 보장	새로운 참조값 생성 → React가 감지 가능