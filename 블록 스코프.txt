블록 범위 스코프(Block Scope)는 

**중괄호 {}로 감싸진 코드 블록 내부에서만 유효한 변수의 범위(scope)**를 의미합니다. 
이 범위 안에서 선언된 변수는 블록 밖에서는 접근할 수 없습니다.

운영체제가 프로그램에 메모리를 할당해주고, 이 메모리는 여러 영역으로 나뉘어 관리됩니다.

📚 프로그램의 주요 메모리 영역 (C, C++, C#, Java 공통 구조)
메모리 영역			설명	예시
코드 영역 (Code/Text)		실행할 프로그램의 기계어(명령어) 코드가 저장됨	함수 정의
데이터 영역 (Data)		초기화된 전역 변수, 정적 변수 저장	static int x = 10;
BSS 영역				초기화되지 않은 전역 변수, 정적 변수 저장	static int y;
힙 영역 (Heap)			런타임 중 동적으로 할당된 메모리 공간	new, malloc()
스택 영역 (Stack)			함수 호출 시 지역 변수, 매개변수 저장	지역 변수 int a = 5;

🔍 각 영역의 특징

✔ 스택(Stack)
함수가 호출될 때마다 쌓이고, 끝나면 자동으로 사라짐
빠르고 자동으로 메모리 관리됨
지역 변수, 매개변수 저장

✔ 힙(Heap)
new, malloc 등으로 직접 할당/해제
메모리 누수 가능성 있음 (C언어 등에서)
객체나 배열처럼 크기가 유동적인 데이터 저장

✔ 데이터 영역 / BSS
전역 변수, 정적 변수의 저장소
프로그램 종료 시까지 살아있음

✔ 코드 영역
프로그램의 실행 코드 저장
읽기 전용 (수정 불가)

💡 간단한 그림 설명
(간략한 구조)

scss
복사
편집
[ 코드 영역     ] ←  프로그램 명령어 저장
[ 데이터 영역  ] ←  static, global 변수
[ BSS 영역      ] ←  초기화 안 된 static, global 변수
[ 힙 영역        ] ↑  아래쪽에서 위로 자람 (동적 메모리)
[ 스택 영역     ] ↓  위쪽에서 아래로 자람 (지역 변수 등)

이 개념은 변수의 수명(lifetime), 스코프(scope), 메모리 누수, 가비지 컬렉션 같은 주제와도 연결돼요.