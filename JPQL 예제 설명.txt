@Query("SELECT i FROM Item i WHERE i.itemDetail like %:itemDetail% ORDER BY i.price desc ")
List<Item> findByItemDetail(@Param("itemDetail") String itemDetail);
✅ 전체 설명
이 메서드는 상품 상세 설명(itemDetail)에 특정 문자열이 포함된 상품들을 가격 기준으로 내림차순 정렬해서 조회하는 JPQL 쿼리야.

🧩 1. @Query(...)
Spring Data JPA에서 직접 JPQL을 작성해서 실행할 수 있도록 해주는 어노테이션이야.
여기서는 직접 JPQL을 적었지:

"SELECT i FROM Item i WHERE i.itemDetail like %:itemDetail% ORDER BY i.price desc"

🧩 2. JPQL 쿼리 해석

부분	설명
SELECT i FROM Item i	Item 엔티티를 i로 별칭(alias) 줌
WHERE i.itemDetail like %:itemDetail%	itemDetail 필드에 파라미터 itemDetail이 포함된 문자열인지 검사 (LIKE 구문)
%:itemDetail%	%는 SQL에서 "모든 문자열"을 의미 (즉, 포함 여부 확인)
ORDER BY i.price desc	가격을 기준으로 내림차순 정렬함

🧩 3. @Param("itemDetail")

:itemDetail 파라미터를 메서드의 인자에서 바인딩하기 위한 어노테이션이야.
즉, itemDetail이라는 이름으로 바인딩함:
@Param("itemDetail") String itemDetail

✅ 전체 동작 요약

예를 들어 아래처럼 메서드를 호출하면:
itemRepository.findByItemDetail("할인");

JPA는 다음 SQL 비슷한 쿼리로 변환해서 실행하게 돼:

SELECT * FROM item 
WHERE item_detail LIKE '%할인%' 
ORDER BY price DESC;

→ 그리고 그 결과를 List<Item>으로 반환!




✅ JPQL을 쓰는 이유 (장점)
1. Entity 중심으로 작성 → 코드 일관성 유지
SQL은 테이블 중심 → item, item_detail, price 등 DB 컬럼명을 기준
JPQL은 객체 중심 → Item, itemDetail, price 등 자바 클래스와 필드명 그대로 사용

👉 유지보수 시, 클래스 필드명 바꾸면 자동 반영되지만, SQL은 직접 고쳐야 해

2. DB 독립적 → DB를 바꿔도 코드 대부분 수정 없음
JPQL은 Hibernate가 SQL로 번역해주기 때문에 MySQL, PostgreSQL 등 DBMS가 바뀌어도 대부분 문제 없이 작동
SQL은 특정 DB 문법에 따라 바뀔 수 있음

3. 타입 안정성
SQL은 문자열 쿼리 → 컴파일러가 문법 체크 못함
JPQL은 Entity 필드 기반 → 컴파일러가 문법 오류 잡아줌

4. Spring Data JPA와 잘 통합됨
@Query를 쓰면 메서드처럼 깔끔하게 호출 가능
복잡하지 않은 쿼리는 메서드 이름만으로도 자동 생성 (findByItemNm, findByPriceLessThan, 등)

❌ JPQL의 단점
단점	설명
SQL보다 느림	Hibernate가 변환 과정을 거치기 때문에 복잡한 쿼리에서 오버헤드 발생 가능
복잡한 쿼리는 불편	JOIN이 많은 다중 테이블 쿼리는 JPQL보다는 네이티브 SQL이 더 직관적
디버깅 어려움	실제 실행되는 SQL을 확인하려면 로그 설정 필요 (show_sql, format_sql)

✅ 그래서 실무에서는 어떻게?
✔ 추천 전략:
상황	추천 쿼리
단순 쿼리 (검색, 필터 등)	JPQL (또는 메서드 이름 기반 쿼리)
복잡한 조인, 서브쿼리, 성능 중요	Native SQL (@Query(nativeQuery = true))

🔚 결론
단순한 CRUD나 필터링은 JPQL로 충분하고,
복잡한 쿼리는 Native SQL을 적절히 혼합해서 사용하는 게 실무 방식이야.