🧠 useCallback이란?
useCallback은 React의 Hook 중 하나로, 함수를 메모이제이션해서 불필요한 함수 재생성을 막아주는 역할을 합니다.

📌 기본 문법
const memoizedCallback = useCallback(() => {
  // 실행할 함수 내용
}, [의존성]);

의존성 배열에 있는 값이 변경되지 않으면, 이전 함수를 그대로 재사용합니다.
즉, 함수가 렌더링될 때마다 새로 만들어지는 것을 방지합니다.

✅ 왜 사용하나요?
React에서 컴포넌트가 렌더링될 때마다 함수도 다시 생성됩니다.
이때 이 함수가 자식 컴포넌트에 props로 전달되면, 함수 참조가 바뀌어 자식 컴포넌트도 리렌더링됩니다.

→ 이걸 방지하고 싶을 때 useCallback을 사용합니다.

🔍 예시
import React, { useCallback, useState } from 'react';

function Parent() {
  const [count, setCount] = useState(0);

  const handleClick = useCallback(() => {
    console.log('Clicked!');
  }, []); // 의존성이 없으므로 처음 만든 함수 계속 재사용

  return (
    <>
      <button onClick={() => setCount(count + 1)}>증가</button>
      <Child onClick={handleClick} />
    </>
  );
}

const Child = React.memo(({ onClick }) => {
  console.log('Child 렌더링');
  return <button onClick={onClick}>자식 버튼</button>;
});

💡 설명
Parent가 리렌더링될 때마다 handleClick이 새로 만들어지지 않음
Child는 React.memo로 감싸져 있어서, props가 바뀌지 않으면 리렌더링되지 않음
따라서 Child는 불필요한 렌더링을 피할 수 있음 ✅

⚠️ 주의할 점
무조건 쓰는 건 오히려 성능 저하를 가져올 수 있음
props 최적화가 필요할 때만 사용하는 것이 좋음
useCallback도 내부적으로 메모리를 사용하기 때문에 가벼운 함수에는 사용하지 않아도 무방함

📌 정리
항목			설명
목적			함수를 메모이제이션해서 참조 동일성 유지
언제 사용하나	props로 함수를 넘겨서 자식 컴포넌트 리렌더링을 막고 싶을 때
주의사항		무분별하게 사용하면 성능 저하