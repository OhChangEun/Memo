클로저(Closure) 설명 
속성: js에서는 인스턴스 필드 
메서드

클로저는 함수가 선언될 때의 스코프(변수 범위)를 기억하는 함수입니다.
즉, 함수가 외부 함수의 변수에 접근할 수 있는 능력을 말합니다.

**클로저(Closure)**는 **함수와 그 함수가 선언될 때의 주변 변수(스코프)**를 함께 기억하는 함수입니다.
함수가 실행된 이후에도, 외부 함수의 지역 변수에 계속 접근할 수 있는 함수를 클로저라고 해요.

🔍 예제를 먼저 볼게요
javascript
function createCounter() {
  let count = 0;  // 외부 함수의 지역 변수

  return function () {
    count++;
    console.log(count);
  };
}

const counter = createCounter();  // 외부 함수 실행 → 내부 함수 반환
counter(); // 1
counter(); // 2
counter(); // 3

💡 무슨 일이 일어난 걸까?
1. createCounter()가 실행되면 count라는 지역 변수가 만들어져요.
2. 내부에 있는 함수가 return되면서 외부로 빠져나감.
3. 그런데 신기하게도, 그 내부 함수는 count를 기억하고 있어요.
4. counter()를 계속 호출하면, count는 외부 함수가 끝났는데도 계속 유지됩니다.

이게 바로 클로저! 함수가 주변 환경을 기억하고 있음.

✅ 클로저가 유용한 이유
1. 캡슐화: 외부에서는 내부 상태(count)에 직접 접근 불가
2. 상태 유지: 함수가 데이터를 저장하고 유지할 수 있음
3. 콜백, 이벤트 핸들러, 비동기 처리 등에 자주 쓰임

