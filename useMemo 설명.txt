useMemo는 React의 Hook 중 하나로, 
비용이 많이 드는 계산 결과를 메모이제이션(memoization) 하여 성능을 최적화할 수 있게 해줍니다.

📌 기본 문법
const memoizedValue = useMemo(() => computeSomething(a, b), [a, b]);

✅ 작동 방식
computeSomething(a, b)의 결과를 계산하고 저장합니다.
의존성 배열 [a, b]에 있는 값이 바뀌지 않으면, 이전 계산 값을 재사용합니다.
즉, 불필요한 재계산을 방지하여 렌더링 성능을 높여줍니다.

📖 예시

import React, { useMemo, useState } from "react";

function ExpensiveComponent({ number }) {
  const expensiveResult = useMemo(() => {
    console.log("계산 중...");
    let result = 0;
    for (let i = 0; i < 1000000000; i++) {
      result += number;
    }
    return result;
  }, [number]);

  return <div>결과: {expensiveResult}</div>;
}
number가 바뀔 때만 계산 중...이 실행됩니다.
같은 값이면 다시 계산하지 않고 캐시된 결과 사용.

🧠 언제 사용하나요?

무거운 계산 함수가 렌더링마다 호출될 때
동일한 계산 결과를 여러 번 쓰는 경우
렌더링 최적화가 필요한 경우

⚠️ 주의점
모든 계산에 useMemo를 남발하지 마세요.
캐싱도 비용이 들기 때문에 오히려 성능을 저하시킬 수 있습니다.
"비용이 큰 연산"이 있는 경우에만 사용하세요.

