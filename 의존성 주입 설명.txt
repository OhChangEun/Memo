객체지향에서 **의존성 주입(Dependency Injection, DI)**은 쉽게 말하면 필요한 객체를 직접 만들지 않고, 외부에서 넣어주는 방식이에요.

🔍 왜 필요한가?
클래스가 다른 클래스에 **의존(Dependency)**할 때,
그 의존 대상을 직접 만들면 코드가 딱딱 묶여서 유연하지 못해요.

의존성 주입은 이런 결합도를 낮추고, 테스트나 확장을 쉽게 해줘요.

📦 예시 (C# 기준)
🔴 일반적인 의존 방식 (강한 결합)
class Engine {
    public void Start() => Console.WriteLine("엔진 시동");
}

class Car {
    private Engine engine = new Engine(); // 직접 생성 (강한 결합)

    public void Run() {
        engine.Start();
    }
}
Car는 무조건 Engine을 직접 만들기 때문에,
다른 종류의 엔진으로 바꾸기 어렵고 테스트도 어려워요.

🟢 의존성 주입 방식 (약한 결합)
class Car {
    private Engine engine;

    // 생성자를 통해 외부에서 Engine을 주입
    public Car(Engine engine) {
        this.engine = engine;
    }

    public void Run() {
        engine.Start();
    }
}

// 사용 시점에서 원하는 엔진을 주입
var engine = new Engine();
var car = new Car(engine);
car.Run();
이제 Car는 어떤 종류의 Engine이든 받을 수 있어요.

Engine 대신 FakeEngine을 넣으면 테스트도 쉬움.

💡 핵심 요약
구분		설명
의존성	어떤 클래스가 다른 클래스의 기능을 필요로 하는 것
주입		그 의존 대상을 외부에서 넣어주는 것
목적		결합도 낮춤, 테스트 용이, 코드 재사용성 증가