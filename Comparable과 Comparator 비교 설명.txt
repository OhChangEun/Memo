Comparable과 Comparator 비교 설명 

Java에서 객체를 정렬하기 위해 사용하는 두 가지 인터페이스입니다. 둘 다 정렬 기준을 정의하는데 사용되지만 사용 목적과 방식이 다릅니다.

✅ 1. Comparable 인터페이스
"자기 자신이 기본적으로 어떻게 정렬될지 정의하는 방식"

📌 특징
java.lang 패키지에 포함.

compareTo(T o) 메서드를 구현해야 함.

클래스 내부에서 정렬 기준을 직접 정의.

기본 정렬 기준으로 사용됨 (예: TreeSet, Collections.sort() 등에서).

📄 예제
java
복사
편집
public class Person implements Comparable<Person> {
    String name;
    int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    @Override
    public int compareTo(Person o) {
        return this.age - o.age;  // 나이 오름차순 정렬
    }
}
📌 사용 예
java
복사
편집
List<Person> list = new ArrayList<>();
Collections.sort(list); // 기본 정렬 기준(age) 사용
✅ 2. Comparator 인터페이스
"정렬 기준을 외부에서 따로 정의해서 넣는 방식"

📌 특징
java.util 패키지에 포함.

compare(T o1, T o2) 메서드를 구현해야 함.

클래스 외부에서 정렬 기준을 정의하므로, 여러 기준으로 정렬 가능.

보통 익명 클래스나 람다, 별도 클래스로 구현.

📄 예제
java
복사
편집
public class AgeDescendingComparator implements Comparator<Person> {
    @Override
    public int compare(Person p1, Person p2) {
        return p2.age - p1.age;  // 나이 내림차순
    }
}
📌 사용 예
java
복사
편집
Collections.sort(list, new AgeDescendingComparator());  // 외부 기준 사용
혹은 람다로도 가능:

java
복사
편집
Collections.sort(list, (p1, p2) -> p2.age - p1.age);
🆚 비교 요약표
구분	Comparable	Comparator
위치	클래스 내부	클래스 외부
메서드	compareTo(T o)	compare(T o1, T o2)
용도	기본 정렬 기준 정의	여러 개의 정렬 기준 정의 가능
유연성	낮음 (한 가지 기준만 정의 가능)	높음 (여러 기준 만들기 쉬움)
사용 예시	Collections.sort(list)	Collections.sort(list, comparator)

🔍 어떤 걸 써야 할까?
정렬 기준이 한 가지이고 클래스에 고정해도 괜찮다면 → Comparable

정렬 기준이 여러 개이거나 외부에서 변경 가능해야 한다면 → Comparator