Big O 표기법은 알고리즘의 성능(시간 또는 공간 복잡도)을 나타내는 수학적 표기법
입력 크기에 따라 알고리즘의 실행 시간이 어떻게 증가하는지를 설명합니다. 

복잡한 계산이나 구현을 생략하고 "가장 빠르게 증가하는 항만 남겨서" 표현하는 것이 특징입니다.

📌 왜 Big O 표기법을 쓰는가?
컴퓨터 성능, 언어, 하드웨어 등에 상관없이 알고리즘 자체의 효율성을 비교할 수 있음

프로그램이 입력이 커질 때 얼마나 느려지는지 예측 가능

🧠 주요 Big O 종류와 예시

표기법				의미 (입력 n이 커질 때)	예시

O(1)					상수 시간 (입력 크기에 무관)	배열의 인덱스 접근 arr[0]
O(log n)				로그 시간 (빠름)	이진 탐색
O(n)	선형 시간			배열 전체 순회
O(n log n)				로그를 곱한 선형 시간	퀵 정렬, 병합 정렬
O(n²)	제곱 시간			중첩 반복문 (버블 정렬)
O(2ⁿ)	지수 시간 			재귀 피보나치, 브루트포스 조합
O(n!)	팩토리얼 시간 		순열 생성 알고리즘 (TSP 완전탐색 등)

💬 핵심 요약
Big O는 성능을 추상적으로 표현 (실제 속도 아님)
입력 크기가 커질수록 성능 차이가 확연히 드러남
보통은 최악의 경우(worst-case) 기준으로 사용