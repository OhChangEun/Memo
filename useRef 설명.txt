useRef()는 React의 Hook 중 하나로, 변수를 저장할 수 있는 방법을 제공합니다. 하지만 일반적인 변수와 달리, 컴포넌트가 리렌더링될 때도 값이 유지됩니다. 이 Hook은 주로 다음과 같은 경우에 사용됩니다:

✅ 주요 특징

1. 리렌더링 시에도 값이 유지됨
	일반 변수는 컴포넌트가 다시 렌더링될 때 초기화됨.
	useRef()로 만든 변수는 유지됨.
2. 값이 변경되어도 컴포넌트는 리렌더링되지 않음
	useState()와 달리 useRef()로 값을 바꿔도 화면이 다시 그려지지 않음.
3. DOM 요소에 직접 접근할 수 있음
	ref를 통해 HTML 요소에 직접 접근할 수 있음 (e.g., focus() 등).

📌 기본 사용법
import { useRef, useEffect } from 'react';

function MyComponent() {
  const countRef = useRef(0); // 초기값 0

  const handleClick = () => {
    countRef.current += 1;
    console.log('countRef:', countRef.current);
  };

  return (
    <div>
      <button onClick={handleClick}>Click</button>
    </div>
  );
}

countRef.current에 접근하여 값을 저장하거나 가져올 수 있음.
이 값은 컴포넌트가 리렌더링되어도 유지됨.

📌 DOM 접근 예시
import { useRef, useEffect } from 'react';

function FocusInput() {
  const inputRef = useRef(null);

  useEffect(() => {
    inputRef.current.focus(); // 렌더링 후 자동 포커스
  }, []);

  return <input ref={inputRef} type="text" />;
}

이처럼 ref는 DOM 요소와 연결해서 직접 조작할 수 있음.

🆚 useState와 비교
항목		useRef()					useState()
값 유지	✅ 리렌더링 시 값 유지됨		✅ 유지됨
값 변경 시	❌ 리렌더링 발생하지 않음		✅ 리렌더링 발생
주 용도	DOM 접근, 변수 저장 (비표시용)	상태 관리 (화면에 표시됨)


✅ useRef() 핵심 정리

리렌더링 시에도 값이 유지됨
useRef()로 만든 변수는 컴포넌트가 다시 렌더링되어도 초기화되지 않고 그대로 유지됩니다.
값을 변경해도 리렌더링이 발생하지 않음
useRef().current 값을 바꿔도 컴포넌트는 다시 그려지지 않습니다.
따라서 화면에 영향을 주지 않는 "비표시용 데이터" 저장에 적합합니다. (예: 타이머 ID, 이전 상태 등)
DOM 요소에 직접 접근할 수 있음
JSX에서 <input ref={myRef} />처럼 쓰면, myRef.current로 해당 DOM 요소에 접근할 수 있습니다.

예: .focus(), .scrollIntoView(), .value 등 사용 가능

📌 정리하신 문장:
useRef()로 선언한 변수는 리렌더링 시에도 값이 유지되고, 값 변경 시에 리렌더링이 발생하지 않고, DOM에 직접 접근이 가능한 방법이다.

