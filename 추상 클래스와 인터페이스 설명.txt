🔷 1. 추상 클래스 (abstract class)

✅ 정의
공통 기능의 뼈대를 만들기 위한 클래스
일부 메서드는 구현하고, 일부는 구현하지 않은(추상) 메서드로 남겨둠

✅ 특징
항목	설명
키워드		abstract class 클래스명
생성 가능 여부	직접 객체 생성 불가
메서드		구현된 메서드도 가질 수 있음
필드(멤버 변수)	가질 수 있음
생성자		가질 수 있음
상속			단일 상속만 가능 (한 개만 상속 가능)

✅ 예시
abstract class Animal {
    void eat() {
        System.out.println("먹는다");
    }
    abstract void sound(); // 자식 클래스가 반드시 구현해야 함
}

🔷 2. 인터페이스 (interface)

✅ 정의
"무엇을 해야 하는가?"만 정의한 설계도
원래는 전부 추상 메서드였지만,
Java 8부터 default, static 메서드도 가능

✅ 특징
항목			설명
키워드		interface 인터페이스명
생성 가능 여부	객체 생성 불가
메서드		기본적으로 전부 추상 (abstract 생략 가능) (단, default, static 메서드는 구현 가능)
필드			public static final 상수만 가능
생성자		없음
상속			다중 구현 가능 (여러 개 구현 가능)

✅ 예시
interface Flyable {
    void fly(); // 추상 메서드
}

✅ 예시로 비교
abstract class Animal {
    abstract void sound();
    void sleep() {
        System.out.println("잔다");
    }
}

interface Walkable {
    void walk();
}
class Dog extends Animal implements Walkable {
    void sound() {
        System.out.println("멍멍!");
    }
    public void walk() {
        System.out.println("걷는다");
    }
}
🔍 핵심 차이 정리
구분			추상 클래스			인터페이스
목적			공통 기능 정의 (상속 기반)	동작 규약 정의 (구현 기반)
키워드		abstract class			interface
다중 상속		불가능				가능
필드			일반 변수, 상수 모두 가능	상수만 가능 (public static final)
생성자		있음					없음
메서드 구현	일부 구현 가능			원칙적으로 불가능 (default만 예외)

🔚 언제 사용해야 할까?
상황	추천
"상속을 통해 기능을 물려주고 싶다"	✅ 추상 클래스
"이 기능을 구현하려면 반드시 이 메서드를 만들어야 해!"	✅ 인터페이스
"여러 타입의 동작을 공통 규약으로 통일하고 싶다"	✅ 인터페이스
"공통 필드나 생성자가 필요하다"	✅ 추상 클래스