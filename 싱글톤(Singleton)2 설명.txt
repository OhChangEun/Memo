자바에서 싱글톤(Singleton) 패턴은 프로그램 전체에서 단 하나의 인스턴스만 존재하도록 보장하는 디자인 패턴입니다.

✅ 왜 싱글톤을 사용할까?
공유 자원이 하나만 필요할 때 (예: DB 연결, 설정 클래스, 로깅 클래스 등)

메모리 절약, 일관성 유지가 필요할 때

✅ 핵심 개념
클래스의 인스턴스를 하나만 생성하고, 그 인스턴스를 어디서든 공유해서 사용하는 패턴

🔹 구현 예시 (기본형)
public class Singleton {
    private static Singleton instance = new Singleton(); // 유일한 인스턴스 생성

    private Singleton() {
        // 생성자 private → 외부에서 생성 금지
    }

    public static Singleton getInstance() {
        return instance;
    }
}
사용
Singleton obj1 = Singleton.getInstance();
Singleton obj2 = Singleton.getInstance();

System.out.println(obj1 == obj2); // true (같은 인스턴스)

🔸 주요 특징 요약
요소	설명
private static 인스턴스	클래스 내부에서 유일하게 유지
private 생성자	외부에서 new 못하게 제한
public static 메서드	인스턴스에 접근하는 유일한 방법 제공

🔹 멀티스레드 환경에서의 싱글톤 (Double-checked locking)
public class Singleton {
    private static volatile Singleton instance;

    private Singleton() {}

    public static Singleton getInstance() {
        if (instance == null) {
            synchronized (Singleton.class) {
                if (instance == null)
                    instance = new Singleton();
            }
        }
        return instance;
    }
}

✅ 언제 사용하면 좋을까?
로그 기록기 (Logger)
설정 클래스 (Config)
데이터베이스 연결 (DB Connection)
캐시 매니저, 프린터 스풀러 등

🧠 요약
장점					단점
메모리 절약, 일관성 유지	테스트 어려움 (전역 상태), 의존성 주입 방해
인스턴스 재사용 가능		멀티스레드 주의 필요

