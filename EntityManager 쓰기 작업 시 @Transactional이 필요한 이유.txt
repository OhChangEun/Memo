✔️ EntityManager는 "쓰기 작업"을 할 때는 반드시 트랜잭션 환경에서 실행되어야 합니다.
❌ 단순 조회(read-only)는 트랜잭션 없이도 일부 가능합니다.

🔹 EntityManager 트랜잭션 필요 여부 정리
작업 종류	트랜잭션 필요 여부	설명
persist(), merge(), remove()	✅ 필요	DB에 반영되는 쓰기 작업 (INSERT, UPDATE, DELETE)
flush()	✅ 필요	영속성 컨텍스트의 변경 내용을 즉시 DB에 반영 → 반드시 트랜잭션 필요
clear()	❌ 불필요	영속성 컨텍스트 초기화만 하기 때문에 트랜잭션 없어도 호출 가능
find(), createQuery()	⭕ 가능 (제한적)	단순 조회는 트랜잭션 없어도 가능하지만, 일부 JPA 구현체나 설정에 따라 트랜잭션 요구 가능

📌 왜 트랜잭션이 필요할까?
JPA는 내부적으로 변경 감지(Dirty Checking), 쓰기 지연(SQL 늦게 실행) 등의 최적화 기법을 사용합니다.
이 모든 로직은 "트랜잭션 안에서 안전하게 처리되도록 설계"되어 있습니다.

예를 들어:
em.persist(entity); // SQL이 바로 실행되지 않음
em.flush();         // 여기서 SQL 실행
이런 구조에서 트랜잭션이 없다면:

데이터를 반쯤 저장하고 실패할 수 있음 → 데이터 무결성 붕괴
JPA는 정합성 보장을 위해 트랜잭션 강제

💡 실제 프로젝트에서는?
서비스 계층이나 테스트 코드에서 @Transactional 붙여서 트랜잭션 보장하는 게 일반적
트랜잭션 없이 JPA를 사용하면 예외 발생 가능성이 높아짐

✅ 요약
질문	대답
EntityManager는 무조건 트랜잭션 환경에서만 실행돼야 해?	❌ 조회는 가능, 하지만 쓰기 작업은 반드시 트랜잭션 필요
flush()는 트랜잭션 없이 가능?	❌ 트랜잭션 없으면 예외 발생