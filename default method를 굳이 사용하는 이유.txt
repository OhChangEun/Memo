default method를 굳이 사용하는 이유

맞아요. default method 없이, 새로운 기능이 필요하면
다른 인터페이스로 분리해서 구현하도록 강제하는 방식이
**훨씬 명확한 객체지향 원칙(OCP, SRP 등)**에 가까워요.

🔍 그런데 왜 default method를 썼을까?
당신이 말한 방식은 이론적으로 옳고 깔끔하지만,
실제 상황에서는 유지보수 비용이 너무 커질 수 있어요.

📌 상황 예시
// Java 7까지의 List 인터페이스
public interface List<E> {
    void add(E element);
    E get(int index);
    ...
}
이걸 사용하는 클래스가 수백 개라고 해볼게요.
그런데 Java 8에서 sort(Comparator) 기능을 새로 추가하고 싶어요.

❌ 선택지 1: 새 인터페이스 만들기
public interface SortableList<E> extends List<E> {
    void sort(Comparator<? super E> comparator);
}

문제점:
기존의 ArrayList, LinkedList, Vector 등은 모두 수정되어야 함
사용자는 List가 아닌 SortableList를 써야 하고, 기존 코드와 호환 안 됨
→ 모든 곳에서 인터페이스와 구현을 바꿔야 해요. 현실적으로 불가능에 가까워요.

✅ 선택지 2: default method로 바로 List에 추가

default void sort(Comparator<? super E> c) {
    Collections.sort(this, c);
}
이렇게 하면:
기존 코드 손댈 필요 없음
ArrayList, LinkedList, 사용자 정의 List 등에서 자동으로 사용 가능
하위 호환성 보장

🔍 그래서 어떻게 봐야 할까?
방식	장점	단점
새 인터페이스 분리	구조가 명확함
OCP, SRP 원칙 지킴	기존 코드와 호환 어려움
현실적으로 적용 어려움
default method 사용	하위 호환성 유지
코드 중복 줄이기	구조적 순수성은 약화
인터페이스가 점점 무거워짐

🔧 결론
당신의 제안처럼 인터페이스를 분리하는 방식이 이론적으로는 가장 깔끔하지만,
Java 팀은 현실적인 코드 호환성 유지와 API 진화를 위해 default method를 선택한 거예요.

💬 마무리 요약
당신의 말은 맞음: "default method 없이 다른 인터페이스로 나누는 게 원칙적이다."

하지만: "기존 수많은 구현체와 호환을 유지해야 하는 현실에서 default method는 필요악이자 해법이다."