concat을 쓰는 이유
React의 상태 불변성(immutability) 을 지키기 위해서입니다.

📌 concat을 쓰는 이유 요약:
concat은 기존 배열을 변경하지 않고, 새로운 배열을 반환합니다.
→ 즉, 기존의 list는 그대로 두고, 새로운 배열을 만들어 setList()에 전달합니다.

✅ 상태 불변성을 지켜야 하는 이유
React는 상태가 변경되었는지 확인할 때 얕은 비교(shallow comparison) 를 사용합니다.

js
복사
편집
if (prevList !== newList) {
  // 상태가 바뀌었네? => 리렌더링!
}
그래서 기존 배열을 직접 수정하면(예: push), 상태 변경을 React가 감지하지 못할 수 있습니다.

❌ push를 쓰면 안 되는 이유
js
복사
편집
list.push(parseInt(number));  // 배열을 직접 변경
setList(list);                // 같은 참조 전달됨
이렇게 하면 list의 참조값이 그대로이기 때문에 React가 변경된 줄 모릅니다.

✅ concat 사용 예시
js
복사
편집
const nextList = list.concat(parseInt(number));
setList(nextList);
list는 그대로

nextList는 새로운 배열

상태 변경 감지 OK → 정상적으로 리렌더링

✨ 더 간결하게 쓰면
js
복사
편집
setList([...list, parseInt(number)]);
이것도 같은 이유로 안전한 방법입니다. (spread 문법)

