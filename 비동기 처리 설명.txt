비동기 처리 설명 

비동기 처리 얘기 > 코어 

1. CPU Core (중앙처리장치의 코어)
정의: CPU 안에서 실제로 명령어를 실행하는 독립적인 처리 유닛입니다.
설명: 예전에는 CPU 하나에 코어가 하나만 있었지만, 요즘은 **멀티코어(Multi-core)**가 일반적입니다.
예: 듀얼코어(2개), 쿼드코어(4개), 옥타코어(8개) 등

각 코어는 독립적으로 작업을 처리할 수 있어 멀티태스킹과 병렬 처리 성능이 향상됩니다.
논리적 코어(Logical Core): 하이퍼스레딩 기술을 통해 하나의 물리적 코어가 두 개처럼 작동할 수도 있습니다.

비유: 코어를 공장에서 일하는 작업자라고 생각하면, 코어 수가 많을수록 동시에 처리할 수 있는 작업이 많아집니다.

🔹 Core란?
CPU(Core Processing Unit)의 핵심 처리 단위로, 실제로 명령어를 해석하고 실행하는 장치입니다.

🔹 왜 여러 개의 코어가 필요한가요?
과거에는 CPU에 코어가 1개뿐이어서 모든 작업을 순차적으로 처리했습니다.
하지만 컴퓨터 작업이 복잡해지고 병렬 처리가 중요해지면서, **여러 개의 코어(Multi-Core)**를 사용하게 되었습니다.

✔️ 듀얼코어: 코어 2개
✔️ 쿼드코어: 코어 4개
✔️ 옥타코어: 코어 8개
✔️ 16코어 이상도 고성능 CPU에서는 일반적

🔹 Core의 주요 역할
명령어 처리 (Instruction Execution)
레지스터, ALU, 제어 유닛 등 포함
프로그램의 연산, 판단, 제어 흐름을 담당

🔹 코어 수가 많으면 무조건 좋은가요?
상황에 따라 다릅니다.

✅ 멀티태스킹이나 멀티스레드 프로그램에서는 코어 수가 많을수록 성능이 좋음
❌ 하지만 단일 스레드 작업이 많은 경우, 고클럭 단일 코어가 더 효율적일 수 있음

🔹 하이퍼스레딩 (Hyper-Threading)?
하나의 물리 코어가 두 개의 논리 코어처럼 동작하는 기술

예: 4코어 8스레드 CPU → 실질적으로 8개의 작업을 병렬로 처리하는 것처럼 보임







1. 프로세스 (Process)
프로세스는 운영 체제에서 실행되는 프로그램의 인스턴스를 말합니다. 각 프로세스는 독립적인 메모리 공간을 갖고 있으며, 하나의 프로세스가 종료되면 다른 프로세스에는 영향을 주지 않습니다. 프로세스는 자체적인 주소 공간을 가지고, 운영 체제는 이를 관리합니다.

특징:
독립적인 메모리 공간을 사용.
서로 다른 프로세스는 서로 영향을 미치지 않음.
자원을 효율적으로 관리하려면 상대적으로 많은 오버헤드가 발생할 수 있음.

2. 스레드 (Thread)
스레드는 프로세스 내에서 실행되는 최소 단위의 작업입니다. 하나의 프로세스는 여러 개의 스레드를 가질 수 있습니다. 스레드는 같은 프로세스 내에서 자원(메모리 공간 등)을 공유하며, 같은 프로세스 내에서 작업을 분할하여 병렬 처리할 수 있습니다.

특징:
같은 프로세스 내에서 자원을 공유.
상대적으로 적은 오버헤드로 빠르게 생성 및 종료 가능.
하나의 스레드에서 발생한 문제는 같은 프로세스의 다른 스레드에 영향을 미칠 수 있음.

3. 멀티 프로세싱 (Multiprocessing)
멀티 프로세싱은 여러 개의 프로세스를 동시에 실행하는 방식입니다. 이는 다중 코어 CPU에서 각 코어가 하나의 프로세스를 실행하는 방식으로 동작할 수 있습니다. 멀티 프로세싱은 각 프로세스가 독립적인 메모리 공간을 가지므로, 한 프로세스가 종료되어도 다른 프로세스에 영향을 미치지 않습니다.

장점:
프로세스 간 독립성 보장, 하나의 프로세스가 오류를 발생해도 다른 프로세스에는 영향이 적음.
다중 CPU 또는 다중 코어에서 성능을 극대화할 수 있음.

단점:
프로세스 간 데이터 공유가 어려워 통신 비용이 발생할 수 있음.
프로세스 생성 및 관리가 스레드보다 더 많은 오버헤드를 요구함.

4. 멀티 스레딩 (Multithreading)
멀티 스레딩은 하나의 프로세스 내에서 여러 개의 스레드를 생성하여 병렬로 작업을 처리하는 방식입니다. 각 스레드는 프로세스 내의 자원을 공유하면서 병렬 처리 작업을 할 수 있습니다. 멀티 스레딩은 CPU 자원을 효율적으로 사용할 수 있게 해줍니다.

장점:
상대적으로 낮은 오버헤드로 스레드를 생성하고 관리할 수 있음.
자원을 효율적으로 사용할 수 있어 빠른 처리가 가능.
I/O 대기 시간 동안 다른 스레드를 처리하여 성능을 향상시킬 수 있음.

단점:
스레드 간 자원 공유로 인한 동기화 문제 발생 가능.
하나의 스레드에서 오류가 발생하면 같은 프로세스 내 다른 스레드에도 영향을 미칠 수 있음.

결론적으로:
프로세스는 독립적인 실행 단위이고, 스레드는 그 프로세스 내에서 실행되는 작업 단위입니다.
멀티 프로세싱은 여러 프로세스를 동시에 실행하는 방식이고, 멀티 스레딩은 하나의 프로세스 내에서 여러 스레드를 동시에 실행하는 방식입니다.
멀티 프로세싱은 프로세스 간 독립성이 중요하고, 멀티 스레딩은 자원을 공유하면서 더 효율적인 병렬 처리를 목표로 합니다.

멀티 스레딩 > 같은 메모리 접근(임계) 












