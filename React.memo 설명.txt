🧠 React.memo란?
React.memo는 함수형 컴포넌트를 메모이제이션해서,
props가 변경되지 않으면 리렌더링을 생략하도록 하는 고차 컴포넌트(HOC)입니다.

📌 문법
const MemoizedComponent = React.memo(MyComponent);
또는 바로 이렇게도 가능:

export default React.memo(function MyComponent(props) {
  return <div>{props.value}</div>;
});

✅ 언제 사용하나요?
같은 props로 계속 렌더링되는 컴포넌트가 있을 때

부모 컴포넌트가 자주 렌더링되더라도, 자식이 불필요하게 다시 그려지는 걸 막고 싶을 때

🔍 예시
import React, { useState, memo } from 'react';

const Child = memo(({ value }) => {
  console.log('Child 렌더링');
  return <div>{value}</div>;
});

function Parent() {
  const [count, setCount] = useState(0);

  return (
    <>
      <button onClick={() => setCount(count + 1)}>증가</button>
      <Child value="고정된 값" />
    </>
  );
}

💡 설명
Parent가 렌더링되더라도, Child의 props가 변하지 않기 때문에 Child는 다시 렌더링되지 않음
console.log('Child 렌더링')이 버튼 클릭 시 찍히지 않음 → ✅ 렌더링 방지 성공

🔁 커스텀 비교 함수
기본적으로는 props를 shallow 비교(얕은 비교) 합니다.
객체나 함수 참조가 바뀌면 다르다고 판단해서 렌더링이 발생합니다.

이럴 땐 두 번째 인자로 비교 함수를 직접 줄 수 있습니다.

const Memoized = React.memo(MyComponent, (prevProps, nextProps) => {
  return prevProps.value === nextProps.value;
});

⚠️ 주의할 점
props가 객체, 배열, 함수일 경우 참조가 바뀌면 렌더링됨 → 이럴 땐 useMemo, useCallback 같이 써야 함
복잡한 비교 로직을 자주 하면 오히려 성능 손해
불필요한 메모이제이션은 코드 복잡도만 높임

📌 요약	
항목				설명
목적				props가 같으면 리렌더링 생략
비교 방식			기본은 얕은 비교 (shallow equality)
함께 쓰면 좋은 것	useCallback, useMemo
사용 시기			자식 컴포넌트가 props 변화 없이 자주 렌더링될 때
